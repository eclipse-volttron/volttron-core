name: "Draft new release"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version you want to release.'
        required: true

jobs:
  draft-new-release:
    if: github.ref == 'refs/heads/develop'
    name: "Draft a new release"
    runs-on: ubuntu-latest
    steps:    
      - name: Check out repository
        uses: actions/checkout@v3
      
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Create release branch off of develop branch
        run: git checkout -b release/${{ github.event.inputs.version }} origin/develop

      # In order to make a commit, we need to initialize a user.
      # You may choose to write something less generic here if you want, it doesn't matter functionality wise.
      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

      - name: Bump version of pyproject.toml file
        run: |
          poetry version ${{ github.event.inputs.version }}

      - name: Commit pyproject.toml
        id: make-commit
        run: |
          git add pyproject.toml
          git commit --message "Prepare release ${{ github.event.inputs.version }}"

          echo "::set-output name=commit::$(git rev-parse HEAD)"

      # - name: Get previous tag
      #   run: |
      #     PRE_VERSION=$(git describe --abbrev=0 --tags `git rev-list --tags --skip=1 --max-count=1`)
      #     echo "PRE_VERSION=$PRE_VERSION" >> $GITHUB_ENV

      - name: Push new branch
        run: git push origin release/${{ github.event.inputs.version }}

      - name: "✏️ Generate release changelog"
        id: changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.AUTO_PROJECT_PAT }}
          unreleased: false
          headerLabel: "# Release ${{ github.event.inputs.version }}"
          # sinceTag: "${{ env.PRE_VERSION }}"
          

      # - name: Gather PR Data
      #   id: pr_data
      #   env: 
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     data=$(gh pr list --state merged --json number,title,url --limit 1000)
      #     data="${data//'%'/'%25'}"
      #     data="${data//$'\n'/'%0A'}"
      #     data="${data//$'\r'/'%0D'}"
      #     echo "::set-output name=RESULTS::$data"

      - name: Create pull request
        uses: thomaseizinger/create-pull-request@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: release/${{ github.event.inputs.version }}
          base: main
          title: Release version ${{ github.event.inputs.version }}
          reviewers: ${{ github.actor }} # By default, we request a review from the person who triggered the workflow.
          # Write a nice message to the user.
          # We are claiming things here based on the `publish-new-release.yml` workflow.
          # You should obviously adopt it to say the truth depending on your release workflow :)
          body: |
            This PR was created in response to a manual trigger of the release workflow here: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}.
            I've bumped the versions in the pyproject.toml file in this commit: ${{ steps.make-commit.outputs.commit }}.

            Merging this PR will create a GitHub release and upload any assets that are created as part of the release build.

            The following will be the release notes

            ${{ steps.changelog.outputs.changelog }}