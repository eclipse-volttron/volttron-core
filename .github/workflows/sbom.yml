# .github/workflows/sbom.yml
name: Generate SBOM and VDR

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  generate-sbom:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install cdxgen
        run: npm install -g @cyclonedx/cdxgen

      - name: Install depscan
        run: pip install owasp-depscan

      - name: Generate SBOM
        run: cdxgen -t python .

      - name: Generate Vulnerability Data Report
        run: |
          depscan --bom bom.json
          mv ./bom.vdr.json ./reports/bom.vdr.json || echo "No VDR was generated."

      - name: Print VDR as table
        run: |
          sudo apt-get install -y jq
          python -c "
import json
import os

def print_vdr_table(vdr_path):
    with open(vdr_path, 'r') as f:
        vdr_data = json.load(f)
    
    if 'vulnerabilities' not in vdr_data:
        print('No vulnerabilities found.')
        return
    
    vulnerabilities = vdr_data['vulnerabilities']
    if not vulnerabilities:
        print('No vulnerabilities found.')
        return
    
    headers = ['Package', 'Version', 'Vulnerability', 'Severity', 'Score', 'Fix Version']
    print(f'| {" | ".join(headers)} |')
    print(f'| {" | ".join(["---"] * len(headers))} |')
    
    for vuln in vulnerabilities:
        package_name = vuln.get('packageName', 'N/A')
        version = vuln.get('version', 'N/A')
        title = vuln.get('title', 'N/A')
        severity = vuln.get('severity', 'N/A')
        score = str(vuln.get('cvssScore', 'N/A'))
        fix_version = vuln.get('fixVersion', 'N/A')
        
        print(f'| {package_name} | {version} | {title} | {severity} | {score} | {fix_version} |')

vdr_path = './reports/bom.vdr.json'
if os.path.exists(vdr_path):
    print_vdr_table(vdr_path)
else:
    print('VDR file not found.')
          "

      - name: Upload SBOM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: ./bom.json

      - name: Upload VDR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vdr
          path: ./reports
