name: Run Pytests

on:
  push:
    paths:
      - '**.py'
      - 'poetry.yml'
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - '**.py'
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  LANG: en_US.utf-8
  LC_ALL: en_US.utf-8
  PYTHON_VERSION: '3.8'
  PROJECT_NAME: volttron-core

jobs:

  run-tests:
    strategy:
      matrix:
        os: ["ubuntu-20.04", "ubuntu-22.04"]
        python: ["3.8", "3.9", "3.10"]

    runs-on: ${{ matrix.os }}

    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python }}
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.0b2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

#      #----------------------------------------------
#      #       load cached venv if cache exists
#      #----------------------------------------------
#      - name: Load cached venv
#        id: cached-poetry-dependencies
#        uses: actions/cache@v2.1.7
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
#      #----------------------------------------------
#      # install dependencies if cache does not exist
#      #----------------------------------------------
#      - name: Install dependencies
#        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#        run: poetry install --no-interaction --no-root

      #----------------------------------------------
      # install your root project, and run tests.
      #----------------------------------------------
      - name: Install library and run tests
        run: |
          poetry install --no-interaction
          poetry run pytest
